## This Workflow just will run in mobin-2008/dinit instead of main repo for some reasons
## or when a PR labed with "meson".
# WIP!
# FIXME: paths must include Makefiles and related things to avoid meson CI for make only changes.
# FIXME: Fix MacOS, Alpine based CI(s)
# FIXME: We need to run this workflow only in mobin-2008/dinit.
# FIXME: Also it's need to run on master repo when PR has "meson" label.

name: Dinit Meson based CI

on:
  push:
    branches:
      - meson_ci_in_github #FIXME
    paths:
      - '**'
      - '!.*'
      - '!README.md'
      - '!NEWS'
      - '!BUILD*'
      - '!CONTRIBUTORS'
      - '!TODO'
      - '!LICENSE'
      - '!build/includes/README'
      - '!doc/CODE-STYLE'
      - '!doc/COMPARISON'
      - '!doc/CONTRIBUTING'
      - '!doc/DESIGN'
      - '!doc/getting_started.md'
      - '!doc/manpages/README'
      - '!doc/manpages/generate-html.sh'
      - '!doc/manpages/DINIT-AS-INIT.md'
      - '!doc/linux/**'
  pull_request:
    branches:
      - master
    paths:
      - '**'
      - '!.*'
      - '!README.md'
      - '!NEWS'
      - '!BUILD*'
      - '!CONTRIBUTORS'
      - '!TODO'
      - '!LICENSE'
      - '!build/includes/README'
      - '!doc/CODE-STYLE'
      - '!doc/COMPARISON'
      - '!doc/CONTRIBUTING'
      - '!doc/DESIGN'
      - '!doc/getting_started.md'
      - '!doc/manpages/README'
      - '!doc/manpages/generate-html.sh'
      - '!doc/manpages/DINIT-AS-INIT.md'
      - '!doc/linux/**'
  workflow_dispatch:

jobs:

  Debian-bullseye_build:

    runs-on: ubuntu-latest
    container:
      image: debian:bullseye
    strategy:
      matrix:
        include:
          - arch: 'amd64'
          - arch: 'i386'

    steps:
    - uses: actions/checkout@v3
    - name: Add i386 repos
      if: ${{ matrix.arch == 'i386' }}
      run: dpkg --add-architecture i386
    - name: Getting depends (amd64)
      if: ${{ matrix.arch == 'amd64' }}
      run: |
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install g++ meson m4 -y
    - name: Getting depends (i386)
      if: ${{ matrix.arch == 'i386' }}
      run: |
        apt-get update
        DEBIAN_FRONTEND=noninteractive apt-get install g++:i386 meson m4:i386 g++:i386 -y
    - name: Print g++ architecture
      run: g++ -dumpmachine
    - name: Setup
      run: meson setup -Dunit-tests=true -Digr-tests=true dirbuild
    - name: Build
      run: meson compile -C dirbuild
    - name: Unit tests
      run: meson test -v --suite=unit_tests -C dirbuild
    - name: Integration tests
      run: meson test -v --suite=igr_tests -C dirbuild

  MacOS-latest_build:

    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: 'amd64'

    steps:
    - uses: actions/checkout@v3
    # on MacOS, g++ symlinked to clang++
    # We must verify that
    - name: Verify g++ (it is g++ or clang++?)
      run: g++ --version
    - name: Print g++ architecture
      run: g++ -dumpmachine
    - name: Build
      run: make
    - name: Print dinit executive file architecture
      run: file ./src/dinit
    - name: Unit tests
      run: make check
    - name: Integration tests
      run: make check-igr

  Alpine-latest_build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: 'armv6'
          - arch: 'armv7'
          - arch: 'aarch64'

    steps:
    - uses: actions/checkout@v3
    - uses: uraimo/run-on-arch-action@v2.5.0
      name: Getting depends & build & unit tests & integration tests
      with:
        arch: ${{ matrix.arch }}
        distro: alpine_latest
        run: |
          apk add ncurses
          echo "$(tput bold) !---- ${{ matrix.arch }} BUILD ----!$(tput sgr0)"
          echo "$(tput bold) ----Getting depends---- :$(tput sgr0) apk update && apk add make g++ m4 file"
          apk update
          apk add make g++ m4 file
          echo "$(tput bold) ----Print g++ arch---- :$(tput sgr0) g++ -dumpmachine"
          g++ -dumpmachine
          echo "$(tput bold) ----Build---- :$(tput sgr0) make"
          make
          echo "$(tput bold) ----Print dinit executive file architecture---- :$(tput sgr0) file ./src/dinit"
          file ./src/dinit
          echo "$(tput bold) ----Unit tests---- :$(tput sgr0) make check"
          make check
          echo "$(tput bold) ----Integration tests---- :$(tput sgr0) make check-igr"
          make check-igr
